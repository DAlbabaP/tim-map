'use client'

import { useEffect, useRef, useState } from 'react'
import dynamic from 'next/dynamic'
import { useMapStore } from '@/stores/mapStore'
import { useSearchStore } from '@/stores/searchStore'
import { usePanelStore } from '@/stores/panelStore'
import { usePoiSearch } from '@/hooks/usePoiSearch'
import { PoiMenu } from './PoiMenu'
import { FloorPlanSlider } from './FloorPlanSlider'
import { hasFloorPlan, getFloorPlanByLayer, getBuildingByFeature } from '@/config/layers'

// –ó–æ–Ω—ã –∫–æ—Ä–ø—É—Å–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ POI
// –†–∞—Å—à–∏—Ä—è–µ–º –∑–æ–Ω—É –¥–ª—è –∫–æ—Ä–ø—É—Å–∞ 1 (–≥–ª–∞–≤–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è)
const BUILDING_ZONES = {
  korpus1: {
    minLon: 37.550, maxLon: 37.562,  // –†–∞—Å—à–∏—Ä–∏–ª–∏ –∑–æ–Ω—É
    minLat: 55.830, maxLat: 55.838   // –†–∞—Å—à–∏—Ä–∏–ª–∏ –∑–æ–Ω—É
  },
  // –î–æ–±–∞–≤—å—Ç–µ –∑–æ–Ω—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ—Ä–ø—É—Å–æ–≤ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º POI
 */
function getBuildingByPoiCoordinates(lon: number, lat: number): string | null {
  console.log(`üîç getBuildingByPoiCoordinates: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã [${lon}, ${lat}]`)
  
  for (const [buildingId, zone] of Object.entries(BUILDING_ZONES)) {
    console.log(`  üè¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—É ${buildingId}:`, zone)
    const inLonRange = lon >= zone.minLon && lon <= zone.maxLon
    const inLatRange = lat >= zone.minLat && lat <= zone.maxLat
    console.log(`    üìç Lon –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: ${inLonRange} (${lon} –º–µ–∂–¥—É ${zone.minLon} –∏ ${zone.maxLon})`)
    console.log(`    üìç Lat –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: ${inLatRange} (${lat} –º–µ–∂–¥—É ${zone.minLat} –∏ ${zone.maxLat})`)
    
    if (inLonRange && inLatRange) {
      console.log(`  ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∫–æ—Ä–ø—É—Å—É: ${buildingId}`)
      return buildingId
    }
  }
  console.log(`  ‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∫–æ—Ä–ø—É—Å—É`)
  return null
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–∞ –∑–¥–∞–Ω–∏—è –ø–æ –µ–≥–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
 */
function getBuildingByGeometry(geometry: any): string | null {
  if (!geometry) {
    console.log(`‚ùå getBuildingByGeometry: –≥–µ–æ–º–µ—Ç—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`)
    return null
  }

  try {
    if (!('getCoordinates' in geometry)) {
      console.log(`‚ùå getBuildingByGeometry: —É –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ getCoordinates`)
      return null
    }
    
    const coordinates = geometry.getCoordinates()
    console.log(`üìç getBuildingByGeometry: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–µ–æ–º–µ—Ç—Ä–∏–∏:`, coordinates)
    
    if (coordinates && coordinates.length > 0) {
      let x: number | undefined, y: number | undefined
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≥–µ–æ–º–µ—Ç—Ä–∏–∏
      if (coordinates[0] && Array.isArray(coordinates[0])) {
        // –î–ª—è MultiPolygon: coordinates[0][0][0] - –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞
        if (coordinates[0][0] && Array.isArray(coordinates[0][0]) && coordinates[0][0][0] && Array.isArray(coordinates[0][0][0])) {
          [x, y] = coordinates[0][0][0]
          console.log(`üìç getBuildingByGeometry: MultiPolygon, –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ [${x}, ${y}]`)
        }
        // –î–ª—è Polygon: coordinates[0][0] - –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞
        else if (coordinates[0][0] && typeof coordinates[0][0][0] === 'number') {
          [x, y] = coordinates[0][0]
          console.log(`üìç getBuildingByGeometry: Polygon, –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ [${x}, ${y}]`)
        }
      }
      
      if (x !== undefined && y !== undefined) {
        console.log(`üìç getBuildingByGeometry: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ EPSG:3857 [${x}, ${y}]`)
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ EPSG:3857 –≤ WGS84 –∏—Å–ø–æ–ª—å–∑—É—è OpenLayers
        try {
          // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
          import('ol/proj').then(({ toLonLat }) => {
            const [lon, lat] = toLonLat([x, y])
            console.log(`üìç getBuildingByGeometry: —Ç–æ—á–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã [${lon}, ${lat}]`)
            const result = getBuildingByPoiCoordinates(lon, lat)
            console.log(`üè¢ getBuildingByGeometry: —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–∞: ${result}`)
          })
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          const lon = x * 180 / 20037508.34
          const lat = Math.atan(Math.exp(y * Math.PI / 20037508.34)) * 360 / Math.PI - 90
          console.log(`üìç getBuildingByGeometry: –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã [${lon}, ${lat}]`)
          
          const result = getBuildingByPoiCoordinates(lon, lat)
          console.log(`üè¢ getBuildingByGeometry: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–∞: ${result}`)
          return result
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error)
        }
      } else {
        console.log(`‚ùå getBuildingByGeometry: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:`, coordinates)
      }
    }
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–∞ –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏:', error)
  }

  console.log(`‚ùå getBuildingByGeometry: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–ø—É—Å`)
  return null
}

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç OpenLayers –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è SSR –ø—Ä–æ–±–ª–µ–º
const MapView = dynamic(() => import('./MapView'), { ssr: false })

export function MapContainer() {
  const mapRef = useRef<HTMLDivElement>(null)
  const [mapInstance, setMapInstance] = useState<any>(null)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ POI Menu
  const [poiMenuVisible, setPoiMenuVisible] = useState(false)
  const [poiMenuPosition, setPoiMenuPosition] = useState<[number, number] | null>(null)
  const [poiMenuBuilding, setPoiMenuBuilding] = useState<any>(null)
  const [poiMenuBuildingLayer, setPoiMenuBuildingLayer] = useState('')
  const [poiMenuItems, setPoiMenuItems] = useState<any[]>([])
  // –ì–µ–æ–º–µ—Ç—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—ç—Ç–∞–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
  const [activeFloorGeometry, setActiveFloorGeometry] = useState<any>(null)
  const activeFloorGeometryRef = useRef<any>(null)
  
  const { 
    setInitialized, 
    setError,
    setSelectedFeature,
    setMapInstance: setStoreMapInstance,
    visibleLayers,
    setFloorPlan
  } = useMapStore()
  
  const { initializeSearchData } = useSearchStore()
  const { setInfoPanelOpen } = usePanelStore()
  const { checkIfBuilding } = usePoiSearch()

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ POI –≤–Ω—É—Ç—Ä–∏ –≥—Ä–∞–Ω–∏—Ü –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è (–≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ)
  const findPoisInBuilding = async (buildingFeature: any, mapInst: any) => {
    if (!mapInst || !buildingFeature) {
      return []
    }

    const buildingGeometry = buildingFeature.getGeometry()
    if (!buildingGeometry || typeof (buildingGeometry as any).intersectsCoordinate !== 'function') {
      return []
    }

    const nearbyPois: any[] = []

    // POI —Å–ª–æ–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ –∑–¥–∞–Ω–∏–π)
    const POI_LAYERS = ['atm', 'cafe', 'deanery', 'departments', 'lab', 'museum']

    try {
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π OpenLayers
      const { GeoJSON } = await import('ol/format')
      const { LAYERS_CONFIG } = await import('@/config/layers')
      const { toLonLat } = await import('ol/proj')

      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º POI —Å–ª–æ—è–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –¥–∞–Ω–Ω—ã–µ
      for (const layerName of POI_LAYERS) {
        const layerConfig = LAYERS_CONFIG.interactive[layerName as keyof typeof LAYERS_CONFIG.interactive]
        if (!layerConfig) continue

        try {
          const response = await fetch(`/${layerConfig.url}`)
          if (!response.ok) continue

          const geojsonData = await response.json()
          const features = new GeoJSON().readFeatures(geojsonData, {
            featureProjection: 'EPSG:3857'
          })

          for (const feature of features) {
            const geometry = feature.getGeometry()
            if (!geometry || !('getCoordinates' in geometry)) continue

            try {
              const coordinates = (geometry as any).getCoordinates()
              if (!coordinates || typeof coordinates[0] !== 'number') continue

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ —Ç–æ—á–∫–∏ POI –≤–Ω—É—Ç—Ä—å –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∑–¥–∞–Ω–∏—è (–≤—Å–µ –≤ EPSG:3857)
              const isInside = (buildingGeometry as any).intersectsCoordinate(coordinates)

              // –õ–æ–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
              const [lon, lat] = toLonLat(coordinates)
              console.log(`  üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º POI –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: [${lon}, ${lat}] ‚Üí –≤–Ω—É—Ç—Ä–∏ –∑–¥–∞–Ω–∏—è: ${isInside}`)

              if (isInside) {
                const properties = feature.getProperties()
                const featureId = feature.getId() || feature.get('id') || ''
                const uniqueId = `${layerName}_${featureId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

                nearbyPois.push({
                  id: uniqueId,
                  layerName,
                  name: properties.name || properties.title || `–û–±—ä–µ–∫—Ç ${layerName}`,
                  type: layerName,
                  geometry,
                  feature,
                  originalId: featureId
                })
              }
            } catch (error) {
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ POI ${layerName}:`, error)
            }
          }
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ POI —Å–ª–æ—è ${layerName}:`, error)
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ POI –≤ –∑–¥–∞–Ω–∏–∏:', error)
    }

    return nearbyPois
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ POI –¥–ª—è –∫–æ—Ä–ø—É—Å–∞ –ø–æ –∏–º–µ–Ω–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ç–æ—á–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const findPoisInBuildingByName = async (buildingId: string, mapInst: any, buildingGeometry?: any) => {
    console.log(`üîç findPoisInBuildingByName: –∏—â–µ–º POI –¥–ª—è –∫–æ—Ä–ø—É—Å–∞ ${buildingId}`)
    
    const nearbyPois: any[] = []
    const POI_LAYERS = ['atm', 'cafe', 'deanery', 'departments', 'lab', 'museum']

    try {
      const { GeoJSON } = await import('ol/format')
      const { LAYERS_CONFIG } = await import('@/config/layers')
      const { toLonLat } = await import('ol/proj')

      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º POI —Å–ª–æ—è–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –¥–∞–Ω–Ω—ã–µ
      for (const layerName of POI_LAYERS) {
        const layerConfig = LAYERS_CONFIG.interactive[layerName as keyof typeof LAYERS_CONFIG.interactive]
        if (!layerConfig) continue

        try {
          const response = await fetch(`/${layerConfig.url}`)
          if (!response.ok) continue

          const geojsonData = await response.json()
          const features = new GeoJSON().readFeatures(geojsonData, {
            featureProjection: 'EPSG:3857'
          })

          for (const feature of features) {
            const geometry = feature.getGeometry()
            if (!geometry || !('getCoordinates' in geometry)) continue

            try {
              const coordinates = (geometry as any).getCoordinates()
              if (!coordinates || typeof coordinates[0] !== 'number') continue

              // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –≥–µ–æ–º–µ—Ç—Ä–∏—é –∑–¥–∞–Ω–∏—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ø–∞–¥–∞–Ω–∏—è
              if (buildingGeometry && typeof (buildingGeometry as any).intersectsCoordinate === 'function') {
                const isInside = (buildingGeometry as any).intersectsCoordinate(coordinates)
                const [lon, lat] = toLonLat(coordinates)
                console.log(`  üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º POI –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: [${lon}, ${lat}] –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏ ‚Üí ${isInside}`)
                if (!isInside) continue
              } else {
                // Fallback: —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –∑–æ–Ω–µ
                const [lon, lat] = toLonLat(coordinates)
                console.log(`  üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º POI –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: [${lon}, ${lat}] –¥–ª—è –∫–æ—Ä–ø—É—Å–∞ ${buildingId}`)
                const poiBuildingId = getBuildingByPoiCoordinates(lon, lat)
                if (poiBuildingId !== buildingId) {
                  console.log(`  ‚ùå POI –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ—Ä–ø—É—Å—É ${buildingId}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
                  continue
                }
              }

              const properties = feature.getProperties()
              const featureId = feature.getId() || feature.get('id') || ''
              const uniqueId = `${layerName}_${featureId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

              console.log(`  ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º POI –≤ –∫–æ—Ä–ø—É—Å ${buildingId}: ${properties.name || properties.title || '–û–±—ä–µ–∫—Ç ' + layerName}`)

              nearbyPois.push({
                id: uniqueId,
                layerName,
                name: properties.name || properties.title || `–û–±—ä–µ–∫—Ç ${layerName}`,
                type: layerName,
                geometry,
                feature,
                originalId: featureId
              })
            } catch (error) {
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ POI ${layerName}:`, error)
            }
          }
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ POI —Å–ª–æ—è ${layerName}:`, error)
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–æ–∏—Å–∫–µ POI –≤ –∑–¥–∞–Ω–∏–∏:', error)
    }

    console.log(`üéâ findPoisInBuildingByName: –Ω–∞–π–¥–µ–Ω–æ POI –¥–ª—è –∫–æ—Ä–ø—É—Å–∞ ${buildingId}: ${nearbyPois.length}`)
    return nearbyPois
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
  useEffect(() => {
    let mounted = true

    const initializeMap = async () => {
      try {
        if (!mapRef.current) return

                 // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç OpenLayers
         const { Map } = await import('ol')
         const { View } = await import('ol')
         const { Tile: TileLayer } = await import('ol/layer')
         const { Vector: VectorLayer } = await import('ol/layer') 
         const { Vector: VectorSource } = await import('ol/source')
         const { XYZ } = await import('ol/source')
         const { GeoJSON } = await import('ol/format')
         const { fromLonLat } = await import('ol/proj')
         const { MAP_Z_INDEX, MAP_CONFIG } = await import('@/config/map')
        
        // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        mapRef.current.innerHTML = ''

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        const map = new Map({
          target: mapRef.current,
          layers: [], // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —Å–ª–æ–µ–≤
          view: new View({
            center: fromLonLat([37.556241, 55.833967]), // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
            zoom: 16,
            minZoom: 10,
            maxZoom: 22,
            extent: MAP_CONFIG?.extent
          }),
          controls: [] // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã
        })

        if (!mounted) return

        // –ë–∞–∑–æ–≤—ã–π —Ç–∞–π–ª–æ–≤—ã–π —Å–ª–æ–π (OSM fallback) –ø–æ–¥ –≤—Å–µ–º–∏ –≤–µ–∫—Ç–æ—Ä–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´–¥—ã—Ä–æ–∫¬ª –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ø–æ–¥–ª–æ–∂–∫–∏
        const osmBase = new TileLayer({
          source: new XYZ({
            url: MAP_CONFIG.tileLayer.fallbackUrl,
            crossOrigin: 'anonymous'
          }),
          preload: Infinity,
          zIndex: MAP_Z_INDEX.BASE_LAYERS - 10,
          properties: { name: 'osm_base', interactive: false }
        })
        map.addLayer(osmBase)

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–µ
        map.on('click', (event) => {
          // –ï—Å–ª–∏ –ø–æ—ç—Ç–∞–∂–Ω—ã–π –ø–ª–∞–Ω –æ—Ç–∫—Ä—ã—Ç –∏ –∫–ª–∏–∫ –ø—Ä–∏—à—ë–ª –≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º
          const currentPlan = useMapStore.getState().floorPlan
          const activeGeom = activeFloorGeometryRef.current
          if (currentPlan?.isVisible && activeGeom && typeof (activeGeom as any).intersectsCoordinate === 'function') {
            const inside = (activeGeom as any).intersectsCoordinate(event.coordinate)
            if (!inside) {
              const { hideFloorPlan } = useMapStore.getState()
              hideFloorPlan()
              setActiveFloorGeometry(null)
              activeFloorGeometryRef.current = null
              setPoiMenuVisible(false)
            }
          }
          const features = map.getFeaturesAtPixel(event.pixel)

          if (features && features.length > 0) {
            // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç
            let interactiveFeature = null
            let interactiveLayerName = 'unknown'

            for (const feature of features) {
              // –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–π, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç feature
              for (const layer of map.getLayers().getArray()) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Å–ª–æ–π
                const vectorLayer = layer as any
                if (vectorLayer.getSource && typeof vectorLayer.getSource === 'function') {
                  const source = vectorLayer.getSource()
                  if (source && source.getFeatures && source.getFeatures().includes(feature)) {
                    const layerName = vectorLayer.get('name') || 'unknown'
                    const layerProperties = vectorLayer.getProperties()

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º
                    if (layerProperties.interactive === true) {
                      interactiveFeature = feature
                      interactiveLayerName = layerName
                      break
                    }
                  }
                }
              }
              if (interactiveFeature) break
            }

            if (interactiveFeature) {
              setSelectedFeature(interactiveFeature, interactiveLayerName)
              setInfoPanelOpen(true)

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–∏–∫–Ω—É—Ç—ã–π —Å–ª–æ–π —á–∞—Å—Ç—å—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—ç—Ç–∞–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
              const currentFloorPlan = useMapStore.getState().floorPlan
              const isFloorPlanLayer = currentFloorPlan?.availableFloors.some(
                floor => floor.layerName === interactiveLayerName
              )

              if (isFloorPlanLayer) {
                // –ö–ª–∏–∫ –ø–æ –∫–æ–º–Ω–∞—Ç–µ –≤ –ø–æ—ç—Ç–∞–∂–Ω–æ–º –ø–ª–∞–Ω–µ - –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞–Ω, —Ç–æ–ª—å–∫–æ —Å–∫—Ä—ã–≤–∞–µ–º POI menu
                setPoiMenuVisible(false)
                return
              }

              // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –∑–¥–∞–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ—ç—Ç–∞–∂–Ω—ã–π –ø–ª–∞–Ω –∏–ª–∏ POI
              const isBuilding = checkIfBuilding(interactiveLayerName)
              console.log(`üè¢ –ö–ª–∏–∫ –ø–æ —Å–ª–æ—é: ${interactiveLayerName}, —ç—Ç–æ –∑–¥–∞–Ω–∏–µ: ${isBuilding}`)

              if (isBuilding) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—ç—Ç–∞–∂–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è
                const floorPlanConfig = getBuildingByFeature(interactiveFeature, interactiveLayerName)
                console.log(`üèóÔ∏è –ü–æ—ç—Ç–∞–∂–Ω—ã–π –ø–ª–∞–Ω –Ω–∞–π–¥–µ–Ω:`, !!floorPlanConfig, floorPlanConfig)
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è university_buildings
                if (interactiveLayerName === 'university_buildings') {
                  const properties = interactiveFeature.getProperties()
                  console.log(`üè´ –°–≤–æ–π—Å—Ç–≤–∞ –∑–¥–∞–Ω–∏—è university_buildings:`, properties)
                  
                  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–ø—É—Å –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º –∑–¥–∞–Ω–∏—è
                  const buildingName = properties.name || properties.title || ''
                  const buildingNumber = properties.building_number || ''
                  console.log(`üè´ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è: "${buildingName}", –Ω–æ–º–µ—Ä: "${buildingNumber}"`)
                  
                  // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–ø—É—Å 1, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—ç—Ç–∞–∂–Ω—ã–π –ø–ª–∞–Ω
                  if (buildingName.includes('–ö–æ—Ä–ø—É—Å ‚Ññ 1') || buildingNumber === '1') {
                    console.log(`üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ—Ä–ø—É—Å 1 –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—ç—Ç–∞–∂–Ω—ã–π –ø–ª–∞–Ω`)
                    
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—ç—Ç–∞–∂–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –∫–æ—Ä–ø—É—Å–∞ 1
                    import('@/config/layers').then(({ FLOOR_PLANS }) => {
                      const korpus1Config = FLOOR_PLANS.find(config => config.buildingId === 'korpus1')
                      
                      if (korpus1Config) {
                        const firstFloor = korpus1Config.floors.find(f => f.level === 1) ||
                                         korpus1Config.floors.reduce((min, floor) =>
                                           floor.level < min.level ? floor : min
                                         )

                        setFloorPlan({
                          buildingId: korpus1Config.buildingId,
                          buildingName: korpus1Config.buildingName,
                          currentFloor: firstFloor.level,
                          availableFloors: korpus1Config.floors.map(floor => ({
                            level: floor.level,
                            name: floor.name,
                            layerName: floor.layerName
                          })),
                          isVisible: true
                        })
                        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è
                        const geomForced = interactiveFeature.getGeometry()
                        setActiveFloorGeometry(geomForced)
                        activeFloorGeometryRef.current = geomForced
                        
                        console.log(`‚úÖ –ü–æ—ç—Ç–∞–∂–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –∫–æ—Ä–ø—É—Å–∞ 1 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ!`)
                      }
                    })
                  }
                }
                
                if (floorPlanConfig) {
                  // –ò—â–µ–º –ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂ (level: 1), –µ—Å–ª–∏ –Ω–µ—Ç - –±–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
                  const firstFloor = floorPlanConfig.floors.find(f => f.level === 1) ||
                                   floorPlanConfig.floors.reduce((min, floor) =>
                                     floor.level < min.level ? floor : min
                                   )

                  setFloorPlan({
                    buildingId: floorPlanConfig.buildingId,
                    buildingName: floorPlanConfig.buildingName,
                    currentFloor: firstFloor.level, // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–∂–∞ (level: 1)
                    availableFloors: floorPlanConfig.floors.map(floor => ({
                      level: floor.level,
                      name: floor.name,
                      layerName: floor.layerName
                    })),
                    isVisible: true
                  })
                  // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è
                  const geom = interactiveFeature.getGeometry()
                  setActiveFloorGeometry(geom)
                  activeFloorGeometryRef.current = geom
                }

                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏—â–µ–º POI –≤–Ω—É—Ç—Ä–∏ –∑–¥–∞–Ω–∏—è
                console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ POI –≤ –∑–¥–∞–Ω–∏–∏...`)
                
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ POI –¥–ª—è –∫–æ—Ä–ø—É—Å–∞ 1 –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º
                if (interactiveLayerName === 'university_buildings') {
                  const properties = interactiveFeature.getProperties()
                  const buildingName = properties.name || properties.title || ''
                  const buildingNumber = properties.building_number || ''
                  
                  if (buildingName.includes('–ö–æ—Ä–ø—É—Å ‚Ññ 1') || buildingNumber === '1') {
                    console.log(`üéØ –ò—â–µ–º POI –¥–ª—è –∫–æ—Ä–ø—É—Å–∞ 1 –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ...`)
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º POI —Å buildingId = 'korpus1'
                    const clickedBuildingGeometry = interactiveFeature.getGeometry()
                    findPoisInBuildingByName('korpus1', map, clickedBuildingGeometry).then((nearbyPois) => {
                      console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ POI –≤ –∫–æ—Ä–ø—É—Å–µ 1 –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ:`, nearbyPois.length, nearbyPois)
                      if (nearbyPois.length > 0) {
                        const pixel = event.pixel
                        const rect = mapRef.current?.getBoundingClientRect()
                        if (rect) {
                          const screenX = rect.left + pixel[0]
                          const screenY = rect.top + pixel[1]

                          setPoiMenuPosition([screenX, screenY])
                          setPoiMenuBuilding(interactiveFeature)
                          setPoiMenuBuildingLayer(interactiveLayerName)
                          setPoiMenuItems(nearbyPois)
                          setPoiMenuVisible(true)
                        }
                      } else {
                        setPoiMenuVisible(false)
                      }
                    }).catch((error) => {
                      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ POI –¥–ª—è –∫–æ—Ä–ø—É—Å–∞ 1:', error)
                      setPoiMenuVisible(false)
                    })
                    return // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
                  }
                }
                
                findPoisInBuilding(interactiveFeature, map).then((nearbyPois) => {
                  console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ POI –≤ –∑–¥–∞–Ω–∏–∏:`, nearbyPois.length, nearbyPois)
                  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º POI –º–µ–Ω—é –µ—Å–ª–∏ –µ—Å—Ç—å POI –≤ –∑–¥–∞–Ω–∏–∏
                  if (nearbyPois.length > 0) {
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞ –≤ —ç–∫—Ä–∞–Ω–Ω—ã–µ
                    const pixel = event.pixel
                    const rect = mapRef.current?.getBoundingClientRect()
                    if (rect) {
                      const screenX = rect.left + pixel[0]
                      const screenY = rect.top + pixel[1]

                      setPoiMenuPosition([screenX, screenY])
                      setPoiMenuBuilding(interactiveFeature)
                      setPoiMenuBuildingLayer(interactiveLayerName)
                      setPoiMenuItems(nearbyPois)
                      setPoiMenuVisible(true)
                    }
                  } else {
                    setPoiMenuVisible(false)
                  }
                }).catch((error) => {
                  console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ POI –≤ –∑–¥–∞–Ω–∏–∏:', error)
                  setPoiMenuVisible(false)
                })

                // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—ç—Ç–∞–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
                if (!floorPlanConfig) {
                  const { hideFloorPlan } = useMapStore.getState()
                  hideFloorPlan()
                  setActiveFloorGeometry(null)
                  activeFloorGeometryRef.current = null
                }
              } else {
                // –ö–ª–∏–∫ –Ω–∞ –Ω–µ-–∑–¥–∞–Ω–∏–µ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—ç—Ç–∞–∂–Ω—ã–π –ø–ª–∞–Ω
                const { hideFloorPlan } = useMapStore.getState()
                hideFloorPlan()
                setActiveFloorGeometry(null)
                activeFloorGeometryRef.current = null
                setPoiMenuVisible(false)
              }
            } else {
              // –ù–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º - –ø–ª–∞–≤–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª–∏
              setInfoPanelOpen(false)
              setPoiMenuVisible(false)

              // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–∏—á—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
              setTimeout(() => {
                setSelectedFeature(null, null)
              }, 300)
            }
          } else {
            // –ö–ª–∏–∫ –ø–æ –ø—É—Å—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã - –ø–ª–∞–≤–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏
            setInfoPanelOpen(false)
            setPoiMenuVisible(false)

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—ç—Ç–∞–∂–Ω—ã–π –ø–ª–∞–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–∞—Ä—Ç–µ
            const { hideFloorPlan } = useMapStore.getState()
            hideFloorPlan()
            setActiveFloorGeometry(null)
            activeFloorGeometryRef.current = null

            // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ–∏—á—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
              setSelectedFeature(null, null)
            }, 300)
          }
        })

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã
        map.on('pointermove', (event) => {
          const pixel = map.getEventPixel(event.originalEvent)
          const features = map.getFeaturesAtPixel(pixel)
          
          let hasInteractiveFeature = false
          if (features && features.length > 0) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
            for (const feature of features) {
              for (const layer of map.getLayers().getArray()) {
                const vectorLayer = layer as any
                if (vectorLayer.getSource && typeof vectorLayer.getSource === 'function') {
                  const source = vectorLayer.getSource()
                  if (source && source.getFeatures && source.getFeatures().includes(feature)) {
                    const layerProperties = vectorLayer.getProperties()
                    if (layerProperties.interactive === true) {
                      hasInteractiveFeature = true
                      break
                    }
                  }
                }
              }
              if (hasInteractiveFeature) break
            }
          }
          
          const target = map.getTarget()
          if (target && typeof target !== 'string') {
            target.style.cursor = hasInteractiveFeature ? 'pointer' : ''
          }
        })

        setMapInstance(map)
        setStoreMapInstance(map)
        setInitialized(true)

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error)
        if (mounted) {
          setError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: ${error}`)
        }
      }
    }

    initializeMap()

    return () => {
      mounted = false
    }
  }, [setInitialized, setError, setSelectedFeature, setInfoPanelOpen])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
  useEffect(() => {
    if (!mapInstance) return

    const loadMapData = async () => {
      try {
        
                 // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π OpenLayers
         const { Vector: VectorLayer } = await import('ol/layer')
         const { Vector: VectorSource } = await import('ol/source')
         const { GeoJSON } = await import('ol/format')
         const { Style } = await import('ol/style')
         const { Fill } = await import('ol/style')
         const { Stroke } = await import('ol/style')
         const { Circle } = await import('ol/style')
         const { Icon } = await import('ol/style')

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–µ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const { LAYERS_CONFIG } = await import('@/config/layers')
        
        // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –¥–ª—è POI
        const getIconForLayer = (layerName: string): string | null => {
          const iconMap: Record<string, string> = {
            'cafe': 'mug-saucer-solid.png',
            'atm': 'money-bills-solid.png',
            'lab': 'flask-solid.png',
            'museum': 'landmark-solid.png',
            'deanery': 'building-columns-solid.png',
            'departments': 'building-columns-solid.png',
            'bus_stops': 'bus-solid.png',
            'tram_stops': 'train-tram-solid.png',
            'metro_stations': 'train-tram-solid.png'
          }
          return iconMap[layerName] || null
        }
        
        const allFeatures: Array<{ feature: any, layer: string, category: string }> = []

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—è
        const loadLayer = async (layerName: string, layerConfig: any) => {
          try {
            const response = await fetch(`/${layerConfig.url}`)
            if (!response.ok) {
              console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–π ${layerName}:`, response.status)
              return
            }

            const geojsonData = await response.json()
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            let features = new GeoJSON().readFeatures(geojsonData, {
              featureProjection: 'EPSG:3857'
            })

            // –î–ª—è POI —Å–ª–æ–µ–≤ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∑–¥–∞–Ω–∏–π
            const POI_LAYERS = ['atm', 'cafe', 'deanery', 'departments', 'lab', 'museum']
            if (POI_LAYERS.includes(layerName)) {
              // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
              console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º POI —Å–ª–æ–π ${layerName} —Å ${features.length} –æ–±—ä–µ–∫—Ç–∞–º–∏`)
              
              // features = features.filter((feature: any) => {
              //   const geometry = feature.getGeometry()
              //   if (!geometry) return true

              //   try {
              //     const coordinates = geometry.getCoordinates()
              //     if (!coordinates || typeof coordinates[0] !== 'number') return true

              //     // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ü–∏–∏ EPSG:3857, –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ WGS84
              //     const { toLonLat } = await import('ol/proj')
              //     const [lon, lat] = toLonLat(coordinates)
                  
              //     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ POI –≤–Ω—É—Ç—Ä–∏ –∑–æ–Ω—ã –∫–æ—Ä–ø—É—Å–∞
              //     const buildingId = getBuildingByPoiCoordinates(lon, lat)
                  
              //     // –ï—Å–ª–∏ POI –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–æ–Ω–µ –∫–æ—Ä–ø—É—Å–∞, —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ –Ω–∞ –∫–∞—Ä—Ç–µ
              //     // (–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è POI –º–µ–Ω—é)
              //     return !buildingId
              //   } catch (error) {
              //     console.warn(`–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ POI ${layerName}:`, error)
              //     return true
              //   }
              // })
            }

            const source = new VectorSource({
              features: features as any
            })

            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ –∫–∞–∂–¥–æ–π —Ñ–∏—á–µ
            source.getFeatures().forEach(feature => {
              if ('set' in feature) {
                feature.set('layer', layerName)
                feature.set('category', layerConfig.category)
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ allFeatures —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–∏
                if (layerConfig.interactive) {
                  allFeatures.push({
                    feature: feature as any,
                    layer: layerName,
                    category: layerConfig.category
                  })
                }
              }
            })

            // –ï—Å–ª–∏ —ç—Ç–æ POI —Å–ª–æ–π ‚Äî –Ω–µ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –µ–≥–æ –Ω–∞ –∫–∞—Ä—Ç–µ, –Ω–æ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ allFeatures
            if (POI_LAYERS.includes(layerName)) {
              console.log(`üëÅÔ∏è  –°–∫—Ä—ã–≤–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É POI —Å–ª–æ—è ${layerName} (–¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞/–º–µ–Ω—é)`)
              return
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª—è
            const createStyle = () => {
              if (typeof layerConfig.style === 'function') {
                const styleFunction = layerConfig.style as (feature: any) => any
                return (feature: any) => {
                  const styleConfig = styleFunction(feature)
                  const hexOpacity = Math.round(styleConfig.fillOpacity * 255).toString(16).padStart(2, '0')
                  const geometry = feature.getGeometry()
                  const geometryType = geometry?.getType()
                  
                  const styleOptions: any = {
                    fill: new Fill({
                      color: `${styleConfig.fillColor}${hexOpacity}`
                    }),
                    stroke: new Stroke({
                      color: styleConfig.strokeColor,
                      width: styleConfig.strokeWidth
                    })
                  }
                  
                  // –î–æ–±–∞–≤–ª—è–µ–º image —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ—á–µ—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                  if (geometryType === 'Point' || geometryType === 'MultiPoint') {
                    const iconPath = getIconForLayer(layerName)
                    if (iconPath) {
                      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è POI –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                      styleOptions.image = new Icon({
                        src: `/images/icons/${iconPath}`,
                        scale: 0.03,
                        anchor: [0.5, 1],
                        anchorXUnits: 'fraction',
                        anchorYUnits: 'fraction'
                      })
                    } else {
                      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä—É–∂–æ–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                      styleOptions.image = new Circle({
                        radius: 6,
                        fill: new Fill({
                          color: `${styleConfig.fillColor}${hexOpacity}`
                        }),
                        stroke: new Stroke({
                          color: styleConfig.strokeColor,
                          width: styleConfig.strokeWidth
                        })
                      })
                    }
                  }
                  
                  return new Style(styleOptions)
                }
              } else {
                const styleConfig = layerConfig.style
                const hexOpacity = Math.round(styleConfig.fillOpacity * 255).toString(16).padStart(2, '0')
                
                return (feature: any) => {
                  const geometry = feature.getGeometry()
                  const geometryType = geometry?.getType()
                  
                  const styleOptions: any = {
                    fill: new Fill({
                      color: `${styleConfig.fillColor}${hexOpacity}`
                    }),
                    stroke: new Stroke({
                      color: styleConfig.strokeColor,
                      width: styleConfig.strokeWidth
                    })
                  }
                  
                  // –î–æ–±–∞–≤–ª—è–µ–º image —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ—á–µ—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                  if (geometryType === 'Point' || geometryType === 'MultiPoint') {
                    const iconPath = getIconForLayer(layerName)
                    if (iconPath) {
                      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è POI –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                      styleOptions.image = new Icon({
                        src: `/images/icons/${iconPath}`,
                        scale: 0.03,
                        anchor: [0.5, 1],
                        anchorXUnits: 'fraction',
                        anchorYUnits: 'fraction'
                      })
                    } else {
                      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä—É–∂–æ–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                      styleOptions.image = new Circle({
                        radius: 6,
                        fill: new Fill({
                          color: `${styleConfig.fillColor}${hexOpacity}`
                        }),
                        stroke: new Stroke({
                          color: styleConfig.strokeColor,
                          width: styleConfig.strokeWidth
                        })
                      })
                    }
                  }
                  
                  return new Style(styleOptions)
                }
              }
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—è
            const vectorLayer = new VectorLayer({
              source,
              style: createStyle(),
              zIndex: layerConfig.zIndex || 100,
              properties: {
                name: layerName,
                title: layerConfig.name,
                category: layerConfig.category,
                interactive: layerConfig.interactive
              }
            })

            mapInstance.addLayer(vectorLayer)

          } catch (layerError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—è ${layerName}:`, layerError)
          }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–∏
        for (const [layerName, layerConfig] of Object.entries(LAYERS_CONFIG.base)) {
          await loadLayer(layerName, layerConfig)
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–∏
        for (const [layerName, layerConfig] of Object.entries(LAYERS_CONFIG.interactive)) {
          await loadLayer(layerName, layerConfig)
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        initializeSearchData(allFeatures)

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã:', error)
        setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error}`)
      }
    }

    loadMapData()
  }, [mapInstance, initializeSearchData, setError])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—è —ç—Ç–∞–∂–∞, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
  const loadFloorLayer = async (layerName: string) => {
    if (!mapInstance) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–ª–æ–π –Ω–∞ –∫–∞—Ä—Ç–µ
    const existingLayer = mapInstance.getLayers().getArray().find(
      (layer: any) => layer.get('name') === layerName
    )
    
    if (existingLayer) {
      return // –°–ª–æ–π —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    }

    try {
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π OpenLayers
      const { Vector: VectorLayer } = await import('ol/layer')
      const { Vector: VectorSource } = await import('ol/source')
      const { GeoJSON } = await import('ol/format')
      const { Style, Fill, Stroke } = await import('ol/style')

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–ª–æ—è
      const { LAYERS_CONFIG } = await import('@/config/layers')
      const layerConfig = LAYERS_CONFIG.floorPlans[layerName as keyof typeof LAYERS_CONFIG.floorPlans]
      
      if (!layerConfig) {
        console.warn(`‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–ª–æ—è ${layerName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
        return
      }

      const response = await fetch(`/${layerConfig.url}`)
      if (!response.ok) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–π ${layerName}:`, response.status)
        return
      }

      const geojsonData = await response.json()
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      const features = new GeoJSON().readFeatures(geojsonData, {
        featureProjection: 'EPSG:3857'
      })
      const source = new VectorSource({
        features: features as any
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ –∫–∞–∂–¥–æ–π —Ñ–∏—á–µ
      source.getFeatures().forEach(feature => {
        if ('set' in feature) {
          feature.set('layer', layerName)
          feature.set('category', layerConfig.category)
        }
      })

      // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª—è
      const createStyle = () => {
        if (typeof layerConfig.style === 'function') {
          const styleFunction = layerConfig.style as (feature: any) => any
          return (feature: any) => {
            const styleConfig = styleFunction(feature)
            const hexOpacity = Math.round(styleConfig.fillOpacity * 255).toString(16).padStart(2, '0')
            
            return new Style({
              fill: new Fill({
                color: `${styleConfig.fillColor}${hexOpacity}`
              }),
              stroke: new Stroke({
                color: styleConfig.strokeColor,
                width: styleConfig.strokeWidth
              })
            })
          }
        } else {
          const styleConfig = layerConfig.style
          const hexOpacity = Math.round(styleConfig.fillOpacity * 255).toString(16).padStart(2, '0')
          
          return new Style({
            fill: new Fill({
              color: `${styleConfig.fillColor}${hexOpacity}`
            }),
            stroke: new Stroke({
              color: styleConfig.strokeColor,
              width: styleConfig.strokeWidth
            })
          })
        }
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—è
      const vectorLayer = new VectorLayer({
        source,
        style: createStyle(),
        zIndex: layerConfig.zIndex || 300, // –í—ã—Å–æ–∫–∏–π z-index –¥–ª—è —ç—Ç–∞–∂–µ–π
        properties: {
          name: layerName,
          title: layerConfig.name,
          category: layerConfig.category,
          interactive: layerConfig.interactive
        }
      })

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –Ω–∞ –∫–∞—Ä—Ç—É, –Ω–æ –¥–µ–ª–∞–µ–º –µ–≥–æ –Ω–µ–≤–∏–¥–∏–º—ã–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      vectorLayer.setVisible(false)
      mapInstance.addLayer(vectorLayer)

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—è —ç—Ç–∞–∂–∞ ${layerName}:`, error)
    }
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é —Å–ª–æ–µ–≤
  useEffect(() => {
    if (!mapInstance) return

    mapInstance.getLayers().forEach((layer: any) => {
      const layerName = layer.get('name')
      if (layerName) {
        layer.setVisible(visibleLayers.has(layerName))
      }
    })
  }, [mapInstance, visibleLayers])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–∏ —ç—Ç–∞–∂–µ–π –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ—ç—Ç–∞–∂–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
  const { floorPlan } = useMapStore()
  useEffect(() => {
    if (!mapInstance || !floorPlan) return

    const loadAllFloorLayers = async () => {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–ª–æ–∏ —ç—Ç–∞–∂–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–∞–Ω–∏—è
      for (const floor of floorPlan.availableFloors) {
        await loadFloorLayer(floor.layerName)
      }
      
      // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å–ª–æ–µ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–∂
      const currentFloorLayer = mapInstance.getLayers().getArray().find(
        (layer: any) => layer.get('name') === floorPlan.availableFloors.find(f => f.level === floorPlan.currentFloor)?.layerName
      )
      
      if (currentFloorLayer) {
        currentFloorLayer.setVisible(true)
      }
    }

    loadAllFloorLayers()
  }, [mapInstance, floorPlan])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ POI Menu
  const handlePoiItemClick = (id: string, layerName: string) => {
    // –ù–∞–π—Ç–∏ –∏ –≤—ã–±—Ä–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
    if (mapInstance) {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ —Ç–µ–∫—É—â–∏—Ö poiItems
      const poiItem = poiMenuItems.find(item => item.id === id)
      if (poiItem && poiItem.feature) {
        setSelectedFeature(poiItem.feature, layerName)
        setInfoPanelOpen(true)
        return
      }

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –∑–¥–∞–Ω–∏—é
      if (layerName === poiMenuBuildingLayer && poiMenuBuilding) {
        const buildingId = poiMenuBuilding.getId?.() || poiMenuBuilding.get?.('id') || ''
        if (String(buildingId) === String(id)) {
          setSelectedFeature(poiMenuBuilding, layerName)
          setInfoPanelOpen(true)
          return
        }
      }

      // Fallback: –ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ—è–º (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      mapInstance.getLayers().forEach((layer: any) => {
        if (layer.get('name') === layerName) {
          const source = layer.getSource()
          if (source && source.getFeatures) {
            const features = source.getFeatures()
            // –ò—â–µ–º –ø–æ originalId –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ ID, –∏–Ω–∞—á–µ –ø–æ –ø–æ–ª–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            const originalId = id.includes('_') ? id.split('_')[1] : id
            const targetFeature = features.find((f: any) =>
              String(f.getId() || f.get('id')) === originalId ||
              String(f.getId() || f.get('id')) === id
            )
            if (targetFeature) {
              setSelectedFeature(targetFeature, layerName)
              setInfoPanelOpen(true)
            }
          }
        }
      })
    }
  }

  const handlePoiMenuClose = () => {
    setPoiMenuVisible(false)
  }

  return (
    <>
      <div 
        ref={mapRef}
        className="h-full w-full bg-blue-100"
        style={{ minHeight: '400px' }}
      >
        {/* Fallback –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–∫–∞ –∫–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è */}
        <div className="flex h-full items-center justify-center">
          <div className="text-center">
            <div className="loading-spinner h-8 w-8 mx-auto mb-4" />
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</p>
          </div>
        </div>
      </div>
      
      {/* POI Menu Overlay */}
      <PoiMenu
        isVisible={poiMenuVisible}
        position={poiMenuPosition}
        buildingFeature={poiMenuBuilding}
        buildingLayer={poiMenuBuildingLayer}
        poiItems={poiMenuItems}
        onItemClick={handlePoiItemClick}
        onClose={handlePoiMenuClose}
      />
      
      {/* Floor Plan Slider */}
      <FloorPlanSlider />
    </>
  )
} 